# This is a basic workflow that is manually triggered to update the kodi plugin

name: Manual update

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.  This is where changes will be noted and added to the addon.xml file later.
    inputs:
      change_note1:
        description: 'Change'
#       default: ''
        required: true
      change_note2:
        description: 'Change'
        required: false
      change_note3:
        description: 'Change'
        required: false
      change_note4:
        description: 'Change'
        required: false
      change_note5:
        description: 'Change'
        required: false

permissions:
  contents: write
  pull-requests: write
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
    - name: checkout_plugin
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref_name }}
        fetch-depth: 1
    - name: Build new watchnixtoons2 premium kodi plugin version
      id: build_plugin
      shell: bash {0}
      run: |
        # Get current version from addon.xml
        cur_version=$(grep 'WatchNixtoons2" version' addon.xml | cut -f4 -d " " | cut -c 10- | cut -c -4)
        echo "cur_version=$cur_version" >> $GITHUB_ENV
        # Set net version to be inserted into addon.xml later
        new_version=$(echo $cur_version | awk '{print $1+0.01}')
        echo "new_version=$new_version" >> $GITHUB_ENV
        if [[ ${GITHUB_REF##*/} == "master" ]]; then
          branch=""
        else
          branch=".${GITHUB_REF##*/}"
        fi
        echo "branch=$branch" >> $GITHUB_ENV
        echo "branch4repo=${GITHUB_REF##*/}" >> $GITHUB_ENV
        # Setting the new version of the addon here
        sed -i "/toons2\" version\=\"/c\<addon id\=\"plugin.video.watchnixtoons2${branch}\" name\=\"WatchNixtoons2\" version\=\"${new_version}\" provider-name\=\"doko\/Christian-Haitian\">" addon.xml 
        mkdir plugin.video.watchnixtoons2${branch}
        sed -i "/Cartoons \&amp\; Anime/s//Cartoons \&amp\; Anime\n\n[B]${new_version}[\/B]/" addon.xml
        notes=( "${{ github.event.inputs.change_note5 }}" "${{ github.event.inputs.change_note4 }}" "${{ github.event.inputs.change_note3 }}" "${{ github.event.inputs.change_note2 }}" "${{ github.event.inputs.change_note1 }}" )
        echo "notes=$notes" >> $GITHUB_ENV
        for note in "${notes[@]}"
        do
          if [ ! -z "$note" ]; then
            sed -i "/\[B\]$new_version\[\/B\]/s//\[B\]$new_version\[\/B\]\n- $note/" addon.xml
          fi
        done
        cp addon.xml Default.py *.jpg *.png plugin.video.watchnixtoons2${branch}/.
        cp -R Lib/ plugin.video.watchnixtoons2${branch}/
        cp -R resources/ plugin.video.watchnixtoons2${branch}/
        zip -9 -r ./plugin.video.watchnixtoons2${branch}-${new_version}.zip plugin.video.watchnixtoons2${branch}/
        rm -rf plugin.video.watchnixtoons2${branch}
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add plugin.video.watchnixtoons2${branch}-${new_version}.zip addon.xml
        git commit -m "Add plugin.video.watchnixtoons2${branch}-${new_version}.zip to repo"
    - name: Push new watchnixtoons2 premium kodi plugin version to plugin repo
      uses: ad-m/github-push-action@master
      with:
        branch: ${{ github.ref_name }}
    - name: checkout_chrepo
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.CHREPO_TOKEN }}
        repository: christianhaitian/ch.repo
        ref: master
        persist-credentials: true
        fetch-depth: 0
    - name: Add updated plugin to ch.repo
      id: build_repo
      shell: bash {0}
      run: |
        # Setting the new version of the addon here
        if [[ "$branch" == *"test"* ]]; then
          branchtest=""
        else
          branchtest="$branch"
        fi
        sed -i "/toons2$branchtest\" name\=\"WatchNixtoons2\" version\=\"/c\<addon id\=\"plugin.video.watchnixtoons2$branchtest\" name\=\"WatchNixtoons2\" version\=\"$new_version\" provider-name\=\"doko\/Christian-Haitian\">" addons.xml 
        sed -i "/\[B\]$cur_version\[\/B\]/s//\[B\]$new_version\[\/B\]\n\n\[B\]$cur_version\[\/B\]/" addons.xml
        notes=( "${{ github.event.inputs.change_note5 }}" "${{ github.event.inputs.change_note4 }}" "${{ github.event.inputs.change_note3 }}" "${{ github.event.inputs.change_note2 }}" "${{ github.event.inputs.change_note1 }}" )
        for note in "${notes[@]}"
        do
          if [ ! -z "$note" ]; then
            sed -i "/\[B\]$new_version\[\/B\]/s//\[B\]$new_version\[\/B\]\n- $note/" addons.xml
          fi
        done
        cd plugin.video.watchnixtoons2${branch}
        wget "https://github.com/christianhaitian/plugin.video.watchnixtoons2/raw/${branch4repo}/plugin.video.watchnixtoons2${branch}-${new_version}.zip"
        rm -f addon.xml
        wget "https://github.com/christianhaitian/plugin.video.watchnixtoons2/raw/${branch4repo}/addon.xml"
        cd ..
        cur_md5=$(cat addons.xml.md5)
        # Set new md5
        new_md5=$(echo $cur_md5 | awk '{print $1+1}')
        echo $new_md5 > addons.xml.md5
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add plugin.video.watchnixtoons2${branch}/plugin.video.watchnixtoons2${branch}-${new_version}.zip 
        git add plugin.video.watchnixtoons2${branch}/addon.xml addons.xml*
        git commit -m "Add plugin.video.watchnixtoons2${branch}-${new_version}.zip to repo"
        git push
      env:
        cur_version: ${{ env.cur_version }}
        new_version: ${{ env.new_version }}
        branch: ${{ env.branch }}
        branch4repo: ${{ env.branch4repo }}
